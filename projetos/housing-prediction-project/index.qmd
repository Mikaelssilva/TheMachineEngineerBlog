---
title: "Projeto Pr√°tico: Previs√£o de Pre√ßos de Casas com Machine Learning"
author: "Mikael Silva"
date: 2025-08-04
description: "Aprenda Machine Learning na pr√°tica construindo um modelo que prev√™ pre√ßos de im√≥veis. Tutorial passo a passo para iniciantes."
tags: [regressao, california-housing, tutorial-pratico, projeto-portfolio]
reading-time: true
image: house.png
categories: [Machine Learning, Projeto, Python, Scikit-Learn]
code-copy: true
toc: true
toc-title: "Neste Tutorial"
number-sections: false
---

![California Housing](house.png)

##  Seu Primeiro Projeto de Machine Learning

**Objetivo:** Construir um modelo que prev√™ pre√ßos de casas  
**Tempo:** 30-45 minutos  
**N√≠vel:** Iniciante (Python b√°sico)  
**Resultado:** Modelo com 80% de precis√£o!

## Neste projeto, voc√™ vai aprender:

:::{.grid}

:::{.g-col-6}
### **An√°lise de Dados**
Aprenda a interpretar dados, encontrar padr√µes e entender as m√©tricas que influenciam o modelo.
:::

:::{.g-col-6}
### **Manipula√ß√£o de Dados**  
Use bibliotecas como **Pandas** e **Numpy** para limpar, transformar e preparar seus dados para modelagem.
:::

:::{.g-col-12}
### **Sele√ß√£o de Modelos**
Descubra como escolher o melhor modelo para o seu problema, diferenciando entre modelos de **regress√£o** e **classifica√ß√£o**.
:::

:::

## 1. Preparando o Ambiente

### Bibliotecas que iremos usar

```{python}
import pandas as pd
import numpy as np
```

:::{.callout-tip title="üí° Dica"}
Se voc√™ n√£o tem essas bibliotecas instaladas, use:
`pip install pandas numpy scikit-learn`. Uma outra op√ß√£o para quem n√£o quer instalar nada √© utilizar o `Goolge Colab`.
:::

## 2. Carregando os Dados

### Obtendo o dataset

```{python}
from sklearn.datasets import fetch_california_housing
dados_brutos = fetch_california_housing()
```

```{python}
#| code-fold: true
#| code-summary: 'Ver estrutura dos dados'
print(dados_brutos)
```

:::{.callout-note title="Sobre o Dataset"}
O **California Housing Dataset** cont√©m informa√ß√µes sobre pre√ßos de casas na Calif√≥rnia dos anos 90. √â perfeito para aprender regress√£o!
:::

### Transformando em DataFrame

Observe que os dados est√£o em um formato n√£o mutio convenciaonal. Vamos transform√°-los em um DataFrame para melhorar a visualiza√ß√£o:

```{python}
dados = pd.DataFrame(dados_brutos['data'], columns=dados_brutos['feature_names'])
dados['target'] = dados_brutos['target']
```

```{python}
#| code-fold: true  
#| code-summary: 'Ver primeiras linhas'
dados.head(10)
```

:::{.callout-important title="Entendendo as Vari√°veis"}
- **MedInc:** Renda mediana por lar
- **HouseAge:** Idade mediana das casas  
- **AveRooms:** N√∫mero m√©dio de c√¥modos
- **AveBedrms:** N√∫mero m√©dio de quartos
- **Population:** Popula√ß√£o da regi√£o
- **AveOccup:** Ocupa√ß√£o m√©dia  
- **Latitude/Longitude:** Coordenadas geogr√°ficas
- **Target:** Pre√ßo da casa (em $100k)
:::

## 3. Preparando os Dados

### Separando caracter√≠sticas e alvo

Agora que os dados est√£o carregados, vamos separ√°-los em caracter√≠sticas (X) e alvo (y). As caracter√≠sticas s√£o as vari√°veis que o nosso modelo usar√° para aprender, e o alvo √© o que queremos prever.

```{python}
x = dados.drop('target', axis=1)
y = dados['target']
```

### Dividindo em treino e teste

O pr√≥ximo passo √© dividir os dados em conjuntos de treino e teste. O modelo vai aprender usando os dados de treino e ser√° avaliado usando os dados de teste. Isso garante que ele consiga generalizar para novos dados que ele nunca viu antes.

```{python}
np.random.seed(42)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)
```

:::{.callout-warning title="Divis√£o dos Dados"}
O par√¢metro `test_size` serve para determinar o tamanho da nossa amostra de teste. √â conven√ß√£o deixar **80% dos dados para treinar** e os demais **20% para teste**.
:::

## 4. Selecionando o Modelo

```{python}
from sklearn.ensemble import RandomForestRegressor

# Instanciar o modelo
modelo = RandomForestRegressor(random_state=42)
```

:::{.callout-tip title="Regress√£o vs Classifica√ß√£o"}
- **Regress√£o:** Quando voc√™ quer prever um **n√∫mero** (pre√ßo, idade, temperatura)
- **Classifica√ß√£o:** Quando voc√™ quer prever uma **categoria** (spam/n√£o spam, gato/cachorro)

Como queremos prever pre√ßos (n√∫meros), nosso problema √© de **regress√£o**!
:::

## 5. Treinando o Modelo

Treinar nosso modelo √© super simples. Basta usar a fun√ß√£o `fit()`:

```{python}
modelo.fit(x_train, y_train)
```

:::{.callout-important title='O que aconteceu aqui?'} 
O algoritmo Random Forest analisou os 16.512 exemplos de treino e aprendeu os padr√µes que relacionam as caracter√≠sticas das casas com seus pre√ßos!
:::

## 6. Fazendo Previs√µes

√â super simples tamb√©m. Vamos usar a fun√ß√£o `predict()`:

```{python}
y_preds = modelo.predict(x_test)

# Vamos ver as 10 primeiras previs√µes do nosso modelo
print("Primeiras 10 previs√µes:")
for i in range(10):
    print(f"   Casa {i+1}: ${y_preds[i]:.2f} (${y_preds[i]*100:.0f}k)")
```

### Testando com uma casa nova

Vamos criar dados de uma casa hipot√©tica para ver como o modelo se comporta.

:::{.callout-important title="Formato dos Dados"}
Os dados que voc√™ passar para o modelo ter√£o que estar no **mesmo formato** que voc√™ usou para treinar. No nosso caso, utilizamos um DataFrame do Pandas.
:::

```{python}
# Dados de uma casa hipot√©tica
dados_nova_casa = {
    'MedInc': [5.0],      # Renda mediana: $50k
    'HouseAge': [30.0],   # Casa com 30 anos
    'AveRooms': [6.0],    # 6 c√¥modos em m√©dia
    'AveBedrms': [1.0],   # 1 quarto por casa
    'Population': [1000.0], # Popula√ß√£o da regi√£o
    'AveOccup': [3.0],    # 3 pessoas por casa
    'Latitude': [34.0],   # Localiza√ß√£o
    'Longitude': [-118.0]
}

nova_casa = pd.DataFrame(dados_nova_casa)
preco_previsto = modelo.predict(nova_casa)

print(f"O pre√ßo previsto para a nova casa √©: ${preco_previsto[0]:.2f}")
print(f"Isso equivale a aproximadamente: ${preco_previsto[0]*100:.0f}k")
```

## 7. Avaliando o Modelo

Para avaliar nosso modelo usaremos a fun√ß√£o `score()`:

```{python}
precisao = modelo.score(x_test, y_test)
print(f" Precis√£o do modelo: {precisao:.3f}")
print(f"Isso significa: {precisao*100:.1f}% de acerto!")
```

## O que Voc√™ Conseguiu

:::{.grid}

:::{.g-col-6}
### **Habilidades Desenvolvidas**
- Carregar e preparar dados reais
- Treinar um modelo de Machine Learning  
- Fazer previs√µes com novos dados
- Avaliar a performance do modelo
:::

:::{.g-col-6}
### **Resultados Alcan√ßados**  
- Modelo funcional com 80%+ precis√£o
- C√≥digo completo e comentado
- Projeto pronto para portfolio
- Base s√≥lida para projetos futuros
:::

:::

## Pr√≥ximos Passos

### Quer continuar aprendendo?

Este tutorial cobriu o **essencial** de Machine Learning. No mundo real, projetos profissionais incluem:

- **An√°lise explorat√≥ria visual** - Gr√°ficos profissionais e insights
-  **M√∫ltiplos algoritmos** - Compara√ß√£o entre Linear, XGBoost, etc.
- **Feature Engineering** - T√©cnicas para aumentar precis√£o para 90%+
-  **Deploy na web** - Transformar em aplica√ß√£o funcionando
-  **Interface profissional** - Dashboard completo para usar o modelo

Em breve teremos mais posts sobre machine learning e IA assim como outros projetos legais. Ent√£o, aproveita e se iscreve na [Newsletter](http://eepurl.com/jj-mXo) para n√£o perder nada! At√© a pr√≥xima!

---
**Gostou do tutorial?** Compartilhe com os amigos e considere [apoiar](/about.qmd) o projeto | **Encontrou algum erro?** [Me avise](/contato.qmd)